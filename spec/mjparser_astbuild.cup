package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.util.*;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

parser code {:
    Logger logger = LogManager.getLogger(MJParser.class);

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    boolean errorDetected = false;

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();
        report_error(message, info);
    }

    public void syntax_error(Symbol curr_token) {
        report_error("Syntax error while parsing", curr_token);
    }

    public void unrecovered_syntax_error(Symbol curr_token) throws java.lang.Exception {
        report_fatal_error("Could not recover from syntax error", curr_token);
    }

    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            msg.append(" on line ").append(symbol.left);
            msg.append(" and column ").append(symbol.right);
            msg.append(" while parsing ").append(LexerUtils.GetLexicalIdentifier(symbol.toString()));
            msg.append(" with value ").append(symbol.value);
        }
        logger.error(msg.toString());

        errorDetected = true;
    }
:}

scan with {:
    Symbol symbol = this.getScanner().next_token();
    if (symbol != null && symbol.value != null) {
        logger.info("Line " + symbol.left + ": " + "Parsed symbol: " + symbol.value + " - " + LexerUtils.GetLexicalIdentifier(symbol.toString()));
    }
    return symbol;
:}

nonterminal Program Program;
nonterminal ProgramName ProgramName;

terminal String IDENTIFIER;
terminal Integer CONST_NUMBER;
terminal Character CONST_CHARACTER;

/*
    Keywords:
        program, break, class, enum, else, const, if, do, while, new, print, read,
        return, void, extends, continue, this, foreach
*/
terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ;
terminal EXTENDS, CONTINUE, FOR_EACH;
terminal THEN, STATIC;

/* TODO (acko): enum, do, this, return, void, this, THEN??? STATIC??? */

/* Constants */
terminal CONST_BOOLEAN;

/* Operators */
terminal ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION, MODULO;
terminal INCREMENT, DECREMENT;
terminal AND, OR;
terminal LAMBDA;
terminal LEFT_PARENTHESES, RIGHT_PARENTHESES, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;
terminal DOT, COMMA, SEMI_COLON;
terminal ASSIGNMENT;
terminal EQUALS, NOT_EQUALS, GREATER_THAN, LESS_THAN, GREATER_OR_EQUAL_THAN, LESS_OR_EQUAL_THAN;

nonterminal GlobalDeclarationList GlobalDeclarationList;
nonterminal GlobalDeclarataion GlobalDeclarataion;
nonterminal ConstantDeclarationList ConstantDeclarationList;
nonterminal VariableDeclarationList VariableDeclarationList;
nonterminal ClassDeclarationList ClassDeclarationList;
nonterminal MethodDeclarationList MethodDeclarationList;
nonterminal AssignmentOperator AssignmentOperator;
nonterminal RelationOperator RelationOperator;
nonterminal AdditionOperator AdditionOperator;
nonterminal MultiplicationOperator MultiplicationOperator;

nonterminal Type Type;
nonterminal MethodDeclaration MethodDeclaration;
nonterminal MethodTypeName MethodTypeName;
nonterminal FormalParameters FormalParameters;
nonterminal StatementList StatementList;

nonterminal ConstantDeclaration ConstantDeclaration;
nonterminal VariableTypeName VariableTypeName;
nonterminal Constant Constant;
nonterminal Factor Factor;

nonterminal Term Term;

nonterminal MaybeArray MaybeArray;
nonterminal VariableDeclaration VariableDeclaration;
nonterminal VariableDeclarationListWithSeparator VariableDeclarationListWithSeparator;

nonterminal MaybeNegative MaybeNegative;

/*  "program" ident { ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}" */

Program ::=
    (Program) PROGRAM ProgramName:P1 GlobalDeclarationList:G2
        LEFT_BRACE MethodDeclarationList:M3 RIGHT_BRACE {: RESULT=new Program(P1, G2, M3); RESULT.setLine(P1left); :};

ProgramName ::=
    (ProgramName) IDENTIFIER:programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :};

GlobalDeclarationList ::=
    (GlobalDeclarations) GlobalDeclarationList:G1 GlobalDeclarataion:G2 {: RESULT=new GlobalDeclarations(G1, G2); RESULT.setLine(G1left); :}
    | (GlobalDeclarationEpsilon) {: RESULT=new GlobalDeclarationEpsilon(); :} /* epsilon */;

GlobalDeclarataion ::=
    (GlobalDeclarationConstantDeclarationList) CONST Type:T1 ConstantDeclarationList:C2 SEMI_COLON {: RESULT=new GlobalDeclarationConstantDeclarationList(T1, C2); RESULT.setLine(T1left); :}
    | (GlobalDeclarationVariableDeclarationList) Type:T1 VariableDeclarationList:V2 SEMI_COLON {: RESULT=new GlobalDeclarationVariableDeclarationList(T1, V2); RESULT.setLine(T1left); :}
    | (GlobalDeclarationClassDeclarationList) ClassDeclarationList:C1 {: RESULT=new GlobalDeclarationClassDeclarationList(C1); RESULT.setLine(C1left); :};

ConstantDeclarationList ::=
    (ConstantDeclarations) ConstantDeclarationList:C1 COMMA ConstantDeclaration:C2 {: RESULT=new ConstantDeclarations(C1, C2); RESULT.setLine(C1left); :}
    | (ConstantDeclarationListSingle) ConstantDeclaration:C1 {: RESULT=new ConstantDeclarationListSingle(C1); RESULT.setLine(C1left); :};

/* VarDecl = Type ident ["[" "]"] {"," ident ["[" "]"]} ";" */

VariableDeclarationList ::=
    (VariableDeclarations) VariableDeclarationListWithSeparator:V1 VariableDeclaration:V2 {: RESULT=new VariableDeclarations(V1, V2); RESULT.setLine(V1left); :}
     | (VariableDeclerationListSingle) VariableDeclaration:V1 {: RESULT=new VariableDeclerationListSingle(V1); RESULT.setLine(V1left); :};

VariableDeclarationListWithSeparator ::=
    (VariableDeclarationListWithSeparatorNoError) VariableDeclarationList:V1 COMMA {: RESULT=new VariableDeclarationListWithSeparatorNoError(V1); RESULT.setLine(V1left); :}
    | error COMMA:l {: parser.report_error("Syntax error while declaring variable on line " + lleft, null); :} {: RESULT=new VariableDeclarationListWithSeparatorDerived1(); :};

/* TODO (acko): How do I recover here? */

VariableDeclaration ::=
    (VariableDeclaration) IDENTIFIER:variableName MaybeArray:M1 {: RESULT=new VariableDeclaration(variableName, M1); RESULT.setLine(variableNameleft); :};

MaybeArray ::=
    (MaybeArrayIsArray) LEFT_BRACKET RIGHT_BRACKET {: RESULT=new MaybeArrayIsArray(); :}
    | (MaybeArrayEpsilon) {: RESULT=new MaybeArrayEpsilon(); :} /* epsilon */;

/* TODO(acko): Fix me please. */

ClassDeclarationList ::=
    (ClassDeclarationList) CLASS {: RESULT=new ClassDeclarationList(); :} /* epsilon */;

MethodDeclarationList ::=
    (MethodDeclarations) MethodDeclarationList:M1 MethodDeclaration:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
    | (MethodDeclarationEpsilon) {: RESULT=new MethodDeclarationEpsilon(); :} /* epsilon */;

MethodDeclaration ::=
    (MethodDeclaration) MethodTypeName:M1 LEFT_PARENTHESES FormalParameters:F2 RIGHT_PARENTHESES
        VariableDeclarationList:V3 LEFT_BRACE StatementList:S4 RIGHT_BRACE {: RESULT=new MethodDeclaration(M1, F2, V3, S4); RESULT.setLine(M1left); :};

/* Type = ident */
Type ::=
    (Type) IDENTIFIER:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

MethodTypeName ::=
    (MethodTypeName) Type:returnType IDENTIFIER:methodName {: RESULT=new MethodTypeName(returnType, methodName); RESULT.setLine(returnTypeleft); :};

/* TODO(acko): Fix me please. */

FormalParameters ::= (FormalParameters) LAMBDA {: RESULT=new FormalParameters(); :};
StatementList ::= (StatementList) MULTIPLICATION {: RESULT=new StatementList(); :};

/* ConstDecl = "const" Type ident "=" (numConst | charConst | boolConst) ";" */

ConstantDeclaration ::=
    (ConstantDeclaration) IDENTIFIER:variable ASSIGNMENT Constant:C1 {: RESULT=new ConstantDeclaration(variable, C1); RESULT.setLine(variableleft); :};

Constant ::=
    (ConstantNumber) CONST_NUMBER:C1 {: RESULT=new ConstantNumber(C1); RESULT.setLine(C1left); :}
    | (ConstantCharacter) CONST_CHARACTER:C1 {: RESULT=new ConstantCharacter(C1); RESULT.setLine(C1left); :}
    | (ConstantBoolean) CONST_BOOLEAN {: RESULT=new ConstantBoolean(); :};

VariableTypeName ::=
    (VariableTypeName) Type:variableType IDENTIFIER:variable {: RESULT=new VariableTypeName(variableType, variable); RESULT.setLine(variableTypeleft); :};

/* MethodDecl = (Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}" */
/* FormPars = Type ident ["[" "]"] {"," Type ident ["[" "]"]} */

/* Condition = CondTerm {"||" CondTerm} */

//Condition ::=
//   (CondtitionOR) Condition OR CondTerm;
//    | (ConditionSingleCondTerm) CondTerm;

/* CondTerm = CondFact {"&&" CondFact} */

//CondTerm ::=
//    (CondTermAND) CondTerm AND CondFact
//    | (CondTermSingleCondFact) CondFact;

/* CondFact = Expr [Relop Expr] */

// CondFact ::=
//    (CondFactRelOp) Expr RelationalOperator Expr;

/* Expr = ["â€?"] Term {Addop Term} */

MaybeNegative ::=
    (MaybeNegativeIsNegative) SUBTRACTION {: RESULT=new MaybeNegativeIsNegative(); :}
    | (MaybeNegativeEpsilon) {: RESULT=new MaybeNegativeEpsilon(); :} /* epsilon */;

/* Term := Factor {Mulop Factor} */

Term ::=
    (TermList) Term:T1 MultiplicationOperator:M2 Factor:F3 {: RESULT=new TermList(T1, M2, F3); RESULT.setLine(T1left); :}
    | (TermFactor) Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :};

/* TODO (acko): This needs to be upgraded to handle Expr and new and designator */

/* Factor := numConst | charConst | "(" Expr ")" | boolConst | "new" Type "[" Expr "]"| Designator */

Factor ::=
    (Factor) Constant:C1 {: RESULT=new Factor(C1); RESULT.setLine(C1left); :};

/* Assignop = "=" */

AssignmentOperator ::=
    (AssignmentOperator) ASSIGNMENT {: RESULT=new AssignmentOperator(); :};

/* Relop = "==" | "!=" | ">" | ">=" | "<" | "<=" */

RelationOperator ::=
    (RelationOperatorquals) EQUALS {: RESULT=new RelationOperatorquals(); :}
    | (RelationOperatorNotEquals) NOT_EQUALS {: RESULT=new RelationOperatorNotEquals(); :}
    | (RelationOperatorGreaterThan) GREATER_THAN {: RESULT=new RelationOperatorGreaterThan(); :}
    | (RelationOperatorGreaterOrEqualThan) GREATER_OR_EQUAL_THAN {: RESULT=new RelationOperatorGreaterOrEqualThan(); :}
    | (RelationOperatorLessThan) LESS_THAN {: RESULT=new RelationOperatorLessThan(); :}
    | (RelationOperatorLessOrEqualThan) LESS_OR_EQUAL_THAN {: RESULT=new RelationOperatorLessOrEqualThan(); :};

/* Addop = "+" | "â€?" */

AdditionOperator ::=
    (AdditionOperatorAddition) ADDITION {: RESULT=new AdditionOperatorAddition(); :}
    | (AdditionOperatorSubtraction) SUBTRACTION {: RESULT=new AdditionOperatorSubtraction(); :};

/* Mulop = "*" | "/" | "%" */

MultiplicationOperator ::=
    (MultiplicationOperatorMultiplication) MULTIPLICATION {: RESULT=new MultiplicationOperatorMultiplication(); :}
    | (MultiplicationOperatorDivision) DIVISION {: RESULT=new MultiplicationOperatorDivision(); :}
    | (MultiplicationOperatorModulo) MODULO {: RESULT=new MultiplicationOperatorModulo(); :};
