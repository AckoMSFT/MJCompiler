package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.util.*;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

parser code {:
    Logger logger = LogManager.getLogger(MJParser.class);

    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    boolean errorDetected = false;

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();
        report_error(message, info);
    }

    public void syntax_error(Symbol curr_token) {
        report_error("Syntax error while parsing", curr_token);
    }

    public void unrecovered_syntax_error(Symbol curr_token) throws java.lang.Exception {
        report_fatal_error("Could not recover from syntax error", curr_token);
    }

    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            msg.append(" on line ").append(symbol.left);
            msg.append(" and column ").append(symbol.right);
            msg.append(" while parsing ").append(LexerUtils.GetLexicalIdentifier(symbol.toString()));
            msg.append(" with value ").append(symbol.value);
        }
        logger.error(msg.toString());

        errorDetected = true;
    }
:}

scan with {:
    Symbol symbol = this.getScanner().next_token();
    if (symbol != null && symbol.value != null) {
        logger.info("Line " + symbol.left + ": " + "Parsed symbol: " + symbol.value + " - " + LexerUtils.GetLexicalIdentifier(symbol.toString()));
    }
    return symbol;
:}

nonterminal Program, ProgramName;

terminal String IDENTIFIER;
terminal Integer CONST_NUMBER;
terminal Character CONST_CHARACTER;

/*
    Keywords:
        program, break, class, enum, else, const, if, do, while, new, print, read,
        return, void, extends, continue, this, foreach
*/
terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ;
terminal EXTENDS, CONTINUE, FOR_EACH;
terminal THEN, STATIC;

/* TODO (acko): enum, do, this, return, void, this, THEN??? STATIC??? */

/* Constants */
terminal CONST_BOOLEAN;

/* Operators */
terminal ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION, MODULO;
terminal INCREMENT, DECREMENT;
terminal AND, OR;
terminal LAMBDA;
terminal LEFT_PARENTHESES, RIGHT_PARENTHESES, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;
terminal DOT, COMMA, SEMI_COLON;
terminal ASSIGNMENT;
terminal EQUALS, NOT_EQUALS, GREATER_THAN, LESS_THAN, GREATER_OR_EQUAL_THAN, LESS_OR_EQUAL_THAN;

nonterminal GlobalDeclarationList, GlobalDeclarataion;
nonterminal ConstantDeclarationList, VariableDeclarationList, ClassDeclarationList, MethodDeclarationList;
nonterminal AssignmentOperator, RelationOperator, AdditionOperator, MultiplicationOperator;

nonterminal Type, MethodDeclaration, MethodTypeName, FormalParameters, StatementList;

nonterminal ConstantDeclaration, VariableTypeName, Constant, Factor;

nonterminal Term;

nonterminal MaybeArray, VariableDeclaration, VariableDeclarationListWithSeparator;

nonterminal MaybeNegative;

/*  "program" ident { ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}" */

Program ::=
    (Program) PROGRAM ProgramName GlobalDeclarationList
        LEFT_BRACE MethodDeclarationList RIGHT_BRACE;

ProgramName ::=
    (ProgramName) IDENTIFIER:programName;

GlobalDeclarationList ::=
    (GlobalDeclarations) GlobalDeclarationList GlobalDeclarataion
    | (GlobalDeclarationEpsilon) /* epsilon */;

GlobalDeclarataion ::=
    (GlobalDeclarationConstantDeclarationList) CONST Type ConstantDeclarationList SEMI_COLON
    | (GlobalDeclarationVariableDeclarationList) Type VariableDeclarationList SEMI_COLON
    | (GlobalDeclarationClassDeclarationList) ClassDeclarationList;

ConstantDeclarationList ::=
    (ConstantDeclarations) ConstantDeclarationList COMMA ConstantDeclaration
    | (ConstantDeclarationListSingle) ConstantDeclaration;

/* VarDecl = Type ident ["[" "]"] {"," ident ["[" "]"]} ";" */

VariableDeclarationList ::=
    (VariableDeclarations) VariableDeclarationListWithSeparator VariableDeclaration
     | (VariableDeclerationListSingle) VariableDeclaration;

VariableDeclarationListWithSeparator ::=
    (VariableDeclarationListWithSeparatorNoError) VariableDeclarationList COMMA
    | error COMMA:l {: parser.report_error("Syntax error while declaring variable on line " + lleft, null); :};

/* TODO (acko): How do I recover here? */

VariableDeclaration ::=
    (VariableDeclaration) IDENTIFIER:variableName MaybeArray;

MaybeArray ::=
    (MaybeArrayIsArray) LEFT_BRACKET RIGHT_BRACKET
    | (MaybeArrayEpsilon) /* epsilon */;

/* TODO(acko): Fix me please. */

ClassDeclarationList ::=
    (ClassDeclarationList) CLASS /* epsilon */;

MethodDeclarationList ::=
    (MethodDeclarations) MethodDeclarationList MethodDeclaration
    | (MethodDeclarationEpsilon) /* epsilon */;

MethodDeclaration ::=
    (MethodDeclaration) MethodTypeName LEFT_PARENTHESES FormalParameters RIGHT_PARENTHESES
        VariableDeclarationList LEFT_BRACE StatementList RIGHT_BRACE;

/* Type = ident */
Type ::=
    (Type) IDENTIFIER:typeName;

MethodTypeName ::=
    (MethodTypeName) Type:returnType IDENTIFIER:methodName;

/* TODO(acko): Fix me please. */

FormalParameters ::= (FormalParameters) LAMBDA;
StatementList ::= (StatementList) MULTIPLICATION;

/* ConstDecl = "const" Type ident "=" (numConst | charConst | boolConst) ";" */

ConstantDeclaration ::=
    (ConstantDeclaration) IDENTIFIER:variable ASSIGNMENT Constant;

Constant ::=
    (ConstantNumber) CONST_NUMBER
    | (ConstantCharacter) CONST_CHARACTER
    | (ConstantBoolean) CONST_BOOLEAN;

VariableTypeName ::=
    (VariableTypeName) Type:variableType IDENTIFIER:variable;

/* MethodDecl = (Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}" */
/* FormPars = Type ident ["[" "]"] {"," Type ident ["[" "]"]} */

/* Condition = CondTerm {"||" CondTerm} */

//Condition ::=
//   (CondtitionOR) Condition OR CondTerm;
//    | (ConditionSingleCondTerm) CondTerm;

/* CondTerm = CondFact {"&&" CondFact} */

//CondTerm ::=
//    (CondTermAND) CondTerm AND CondFact
//    | (CondTermSingleCondFact) CondFact;

/* CondFact = Expr [Relop Expr] */

// CondFact ::=
//    (CondFactRelOp) Expr RelationalOperator Expr;

/* Expr = ["‐"] Term {Addop Term} */

MaybeNegative ::=
    (MaybeNegativeIsNegative) SUBTRACTION
    | (MaybeNegativeEpsilon) /* epsilon */;

/* Term := Factor {Mulop Factor} */

Term ::=
    (TermList) Term MultiplicationOperator Factor
    | (TermFactor) Factor;

/*
Statement = DesignatorStatement ";"
| "if" "(" Condition ")" Statement ["else" Statement]
| "while" "(" Condition ")" Statement
| "break" ";"
| "continue" ";"
| "return" [Expr] ";"
| "read" "(" Designator ")" ";"
| "print" "(" Expr ["," numConst] ")" ";"
| Designator "." "foreach" "(" ident "=>" Statement ")" ";" * za B i C nivo
| "{" {Statement} "}"
*/

/* TODO (acko): This needs to be upgraded to handle Expr and new and designator */

/* Factor := numConst | charConst | "(" Expr ")" | boolConst | "new" Type "[" Expr "]"| Designator */

Factor ::=
    (Factor) Constant;

/* Assignop = "=" */

AssignmentOperator ::=
    (AssignmentOperator) ASSIGNMENT;

/* Relop = "==" | "!=" | ">" | ">=" | "<" | "<=" */

RelationOperator ::=
    (RelationOperatorquals) EQUALS
    | (RelationOperatorNotEquals) NOT_EQUALS
    | (RelationOperatorGreaterThan) GREATER_THAN
    | (RelationOperatorGreaterOrEqualThan) GREATER_OR_EQUAL_THAN
    | (RelationOperatorLessThan) LESS_THAN
    | (RelationOperatorLessOrEqualThan) LESS_OR_EQUAL_THAN;

/* Addop = "+" | "‐" */

AdditionOperator ::=
    (AdditionOperatorAddition) ADDITION
    | (AdditionOperatorSubtraction) SUBTRACTION;

/* Mulop = "*" | "/" | "%" */

MultiplicationOperator ::=
    (MultiplicationOperatorMultiplication) MULTIPLICATION
    | (MultiplicationOperatorDivision) DIVISION
    | (MultiplicationOperatorModulo) MODULO;
