package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.ac.bg.etf.pp1.util.*;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

parser code {:
    Logger logger = LogManager.getLogger(MJParser.class);

    boolean errorDetected = false;

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
        done_parsing();
        report_error(message, info);
    }

    public void syntax_error(Symbol curr_token) {
        report_error("Syntax error while parsing", curr_token);
    }

    public void unrecovered_syntax_error(Symbol curr_token) throws java.lang.Exception {
        report_fatal_error("Could not recover from syntax error", curr_token);
    }

    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder(message);
        if (info instanceof Symbol) {
            Symbol symbol = (Symbol) info;
            msg.append(" on line ").append(symbol.left);
            msg.append(" and column ").append(symbol.right);
            msg.append(" while parsing ").append(LexerUtils.GetLexicalIdentifier(symbol.toString()));
            msg.append(" with value ").append(symbol.value);
        }
        logger.error(msg.toString());

        errorDetected = true;
    }
:}

scan with {:
    Symbol symbol = this.getScanner().next_token();
    if (symbol != null && symbol.value != null) {
        logger.info("Line " + symbol.left + ": " + "Parsed symbol: " + symbol.value + " - " + LexerUtils.GetLexicalIdentifier(symbol.toString()));
    }
    return symbol;
:}

/* Terminals */

terminal String IDENTIFIER;
terminal Integer CONST_NUMBER;
terminal Character CONST_CHARACTER;

/*
    Keywords:
        program, break, class, enum, else, const, if, do, while, new, print, read,
        return, void, extends, continue, this, foreach
*/
terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ;
terminal RETURN, VOID, EXTENDS, CONTINUE, FOR_EACH;

/* TODO (acko): enum, do, this, return, void, this, THEN??? STATIC??? */

/* Constants */
terminal CONST_BOOLEAN;

/* Operators */
terminal ADDITION, SUBTRACTION, MULTIPLICATION, DIVISION, MODULO;
terminal INCREMENT, DECREMENT;
terminal AND, OR;
terminal LAMBDA;
terminal LEFT_PARENTHESES, RIGHT_PARENTHESES, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;
terminal DOT, COMMA, SEMI_COLON;
terminal ASSIGNMENT;
terminal EQUALS, NOT_EQUALS, GREATER_THAN, LESS_THAN, GREATER_OR_EQUAL_THAN, LESS_OR_EQUAL_THAN;

/* NonTerminals */

/* Program */
nonterminal Program, GlobalDeclarationList, GlobalDeclaration, MethodDeclarationList, MethodDeclaration;

/* Common */
nonterminal Type, ReturnType, Sign, MaybeArray, MemberElement, ArrayElement;

/* Constants */
nonterminal ConstDecl, ConstDeclarationList, ConstAssignment, Constant;

/* Variables */
nonterminal VarDecl, VariableDeclarationList, VariableDeclaration;

/* Local variables */
nonterminal LocalVarDeclList, LocalVarDecl, LocalVariableDeclarationList, LocalVariableDeclaration;

/* Operators */
nonterminal AssignmentOperator, AdditionOperator, MultiplicationOperator, RelationalOperator;

/* Methods */
nonterminal ActPars, MaybeActPars, FunctionInvocation;

/* Formal parameter */
nonterminal FormPars, MaybeFormPars, FormalParameter;

/* Statements */
nonterminal Statement, MaybeElseStatement, StatementList, Expr, Factor, Term, ConstFactor;
nonterminal MaybePrintWidth, MaybeReturnValue;

/* Designators */
nonterminal Designator, DesignatorAccessList, DesignatorStatement, MemberAccess, MaybeDesignator, DesignatorList;

/* Conditions */
nonterminal Condition, CondTerm, CondFact;

precedence left ELSE;

/*
    Program = "program" ident {ConstDecl | VarDecl | ClassDecl} "{" {MethodDecl} "}".

    Introduce a new nonterminal GlobalDeclaration = ConstDecl | VarDecl | ClassDecl
*/

Program ::=
    (Program) PROGRAM IDENTIFIER SEMI_COLON GlobalDeclarationList LEFT_BRACE MethodDeclarationList RIGHT_BRACE;

GlobalDeclarationList ::=
    (GlobalDeclarationListMulti) GlobalDeclarationList GlobalDeclaration
    | (GlobalDeclarationListEpsilon) /* epsilon */;

GlobalDeclaration ::=
    (GlobalDeclarationConstDecl) ConstDecl
    | (GlobalDeclarationVarDecl) VarDecl;

/* ConstDecl = "const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst | charConst | boolConst)} ";" */

ConstDecl ::=
    (ConstDecl) CONST Type ConstDeclarationList SEMI_COLON;

ConstDeclarationList ::=
    (ConstDeclarationListMulti) ConstDeclarationList COMMA ConstAssignment
    | (ConstDeclarationListSingle) ConstAssignment;

ConstAssignment ::=
    (ConstAssignment) IDENTIFIER AssignmentOperator Constant;

Constant ::=
    (ConstantNumber) Sign CONST_NUMBER
    | (ConstantCharacter) CONST_CHARACTER
    | (ConstantBoolean) CONST_BOOLEAN;

/* VarDecl = Type ident ["[" "]"] {"," ident ["[" "]"]} ";" */

VarDecl ::=
    (VarDecl) Type VariableDeclarationList SEMI_COLON;

VariableDeclarationList ::=
    (VariableDeclarationListMulti) VariableDeclarationList COMMA VariableDeclaration
    | (VariableDeclarationSingle) VariableDeclaration;

VariableDeclaration ::=
    (VariableDeclaration) IDENTIFIER MaybeArray;

/* MethodDeclarationList := {MethodDeclaration} */

MethodDeclarationList ::=
    (MethodDeclarationListMulti) MethodDeclarationList MethodDeclaration
    | (MethodDeclarationListEpsilon) /* epsilon */;

/* MethodDecl = (Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}" */

MethodDeclaration ::=
    (MethodDeclaration) ReturnType IDENTIFIER LEFT_PARENTHESES MaybeFormPars RIGHT_PARENTHESES LocalVarDeclList LEFT_BRACE StatementList RIGHT_BRACE;

/* LocalVarDeclList := {VarDecl} */

LocalVarDeclList ::=
    (LocalVarDeclListMulti) LocalVarDeclList LocalVarDecl
    | (LocalVarDeclEpsilon) /* epsilon */;

/* LocalVarDecl = Type ident ["[" "]"] {"," ident ["[" "]"]} ";" */

LocalVarDecl ::=
    (LocalVarDecl) Type LocalVariableDeclarationList SEMI_COLON;

/* LocalVariableDeclarationList := Type ident ["[" "]"] {"," ident ["[" "]"]} */

LocalVariableDeclarationList ::=
    (LocalVariableDeclarationListMulti) LocalVariableDeclarationList COMMA LocalVariableDeclaration
    | (LocalVariableDeclarationSingle) LocalVariableDeclaration;

/* LocalVariableDeclaration := ident ["[" "]"] */

LocalVariableDeclaration ::=
    (LocalVariableDeclaration) IDENTIFIER MaybeArray;

/*
    FormPars = Type ident ["[" "]"] {"," Type ident ["[" "]"]}

    FormPars = FormalParameter { "," FormalParameter }
*/

FormPars ::=
    (FormParsMulti) FormPars COMMA FormalParameter
    | (FormParsSingle) FormalParameter;

/* FormalParameter := Type ident ["[" "]"] */

FormalParameter ::=
    (FormalParameter) Type IDENTIFIER MaybeArray;

/* MaybeFormPars := [FormPars] */

MaybeFormPars ::=
    (MaybeFormParsIsFormPars) FormPars
    | (MaybeFormParsEpsilon) /* epsilon */;

/*
    ClassDecl = "class" ident ["extends" Type] "{" {VarDecl} ["{" {ConstructorDecl} {MethodDecl} "}"] "}"
    ConstructorDecl = ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}. * za C nivo'

    TODO (acko): Add ClassDecl/ConstructorDecl
*/

/*
    Statement = DesignatorStatement ";"
    | "if" "(" Condition ")" Statement ["else" Statement]
    | "while" "(" Condition ")" Statement
    | "break" ";"
    | "continue" ";"
    | "return" [Expr] ";"
    | "read" "(" Designator ")" ";"
    | "print" "(" Expr ["," numConst] ")" ";"
    | Designator "." "foreach" "(" ident "=>" Statement ")" ";" * za B i C nivo
    | "{" {Statement} "}".
*/

/*
    Shift/Reduce conflict found in state #73
      between Designator ::= IDENTIFIER DesignatorAccessList (*)
      and     MemberElement ::= (*) DOT IDENTIFIER
      under symbol DOT
      Resolved in favor of shifting.

    Need to introduce a new non-terminal MemberAccess for IDENTIFIER DesignatorAccessList DOT
*/

/* MemberAccess := ident DesignatorAccessList "." */

MemberAccess ::=
    (MemberAccess) IDENTIFIER DesignatorAccessList DOT;

Statement ::=
    (StatementDesignator) DesignatorStatement SEMI_COLON
    | (StatementIfElse) IF LEFT_PARENTHESES Condition RIGHT_PARENTHESES Statement MaybeElseStatement
    | (StatementWhile) WHILE LEFT_PARENTHESES Condition RIGHT_PARENTHESES Statement
    | (StatementBreak) BREAK SEMI_COLON
    | (StatementContinue) CONTINUE SEMI_COLON
    | (StatementRead) READ LEFT_PARENTHESES Designator RIGHT_PARENTHESES SEMI_COLON
    | (StatementReturn) RETURN MaybeReturnValue SEMI_COLON
    | (StatementPrint) PRINT LEFT_PARENTHESES Expr MaybePrintWidth RIGHT_PARENTHESES SEMI_COLON
    | (StatementForEach) MemberAccess FOR_EACH LEFT_PARENTHESES IDENTIFIER LAMBDA Statement RIGHT_PARENTHESES SEMI_COLON
    | (StatementBlock) LEFT_BRACE StatementList RIGHT_BRACE;

/* MaybeReturnValue = [Expr] */

MaybeReturnValue ::=
    (MaybeReturnValueIsReturnValue) Expr
    | (MaybeReturnValueEpsilon) /* epsilon */;

/* MaybePrintWidth = ["," numConst] */

MaybePrintWidth ::=
    (MaybePrintWidthIsPrintWidth) COMMA CONST_NUMBER
    | (MaybePrintWidthEpsilon) /* epsilon */;

MaybeElseStatement ::=
    (MaybeElseStatementIsElseStatement) ELSE Statement
    | (MaybeElseStatementEpsilon) /* epsilon */;

/* StatementList = {Statement} */
StatementList ::=
    (StatementListMulti) StatementList Statement
    | (StatementListEpsilon) /* epsilon */;

/* Condition = CondTerm {"||" CondTerm} */

Condition ::=
    (ConditionMulti) Condition OR CondTerm
    | (ConditionSingle) CondTerm;

/* CondTerm = CondFact {"&&" CondFact} */

CondTerm ::=
    (CondTermMulti) CondTerm AND CondFact
    | (CondTermSingle) CondFact;

/* CondFact = Expr [Relop Expr] */

CondFact ::=
    (CondFactMulti) Expr RelationalOperator Expr
    | (CondFactSingle) Expr;

/* Expr = ["‐"] Term {Addop Term} */

Expr ::=
    (ExprMulti) Expr AdditionOperator Term
    | (ExprSingle) Sign Term;

/* Term := Factor {Mulop Factor} */

Term ::=
    (TermMulti) Term MultiplicationOperator Factor
    | (TermSingle) Factor;

/* ActPars := Expr {"," Expr } */

ActPars ::=
    (ActParsMulti) ActPars COMMA Expr
    | (ActParsSingle) Expr;

/* MaybeActPars := [ActPars] */

MaybeActPars ::=
    (MaybeActParsIsActPars) ActPars
    | (MaybeActParsEpsilon) /* epsilon */;

FunctionInvocation ::=
    (FunctionInvocation) LEFT_PARENTHESES MaybeActPars RIGHT_PARENTHESES;


/* Factor := numConst | charConst | "(" Expr ")" | boolConst | "new" Type "[" Expr "]"| Designator */

/*
    Factor = Designator ["(" [ActPars] ")"]
    | numConst
    | charConst
    | boolConst
    | | "new" Type ( "[" Expr "]" | "(" [ActPars] ")" )
    | "(" Expr ")".
*/

Factor ::=
    (FactorDesignator) Designator
    | (FactorFunctionInvocation) Designator FunctionInvocation
    | (FactorConstant) ConstFactor
    | (FactorNewArray) NEW Type ArrayElement
    | (FactorNewClass) NEW Type FunctionInvocation
    | (FactorExpr) LEFT_PARENTHESES Expr RIGHT_PARENTHESES;

/*
        ConstFactor = numConst
        | charConst
        | boolConst
*/

ConstFactor ::=
    (ConstFactorNumber) CONST_NUMBER
    | (ConstFactorCharacter) CONST_CHARACTER
    | (ConstFactorBoolean) CONST_BOOLEAN;

/* Designator = ident {"." ident | "[" Expr "]"} */

Designator ::=
    (DesignatorIdentifier) IDENTIFIER DesignatorAccessList;

/* DesignatorAccessList = {"." ident | "[" Expr "]"} */

DesignatorAccessList ::=
    (DesignatorAccessListMember) DesignatorAccessList MemberElement
    | (DesignatorAccessListElement) DesignatorAccessList ArrayElement
    | (DesignatorAccessListEpsilon) /* epsilon */;

/*
    DesignatorStatement =
        Designator (Assignop Expr | "(" [ActPars] ")" | "++" | "‐‐")
        | "[" [Designator] {"," [Designator]}"]" "=" Designator
*/

DesignatorStatement ::=
    (DesignatorStatementAssignment) Designator AssignmentOperator Expr
    | (DesignatorStatementFunctionInvocation) Designator FunctionInvocation
    | (DesignatorStatementIncrement) Designator INCREMENT
    | (DesignatorStatementDecrement) Designator DECREMENT
    | (DesignatorStatementUnpack) LEFT_BRACKET DesignatorList RIGHT_BRACKET AssignmentOperator Designator;

MaybeDesignator ::=
    (MaybeDesignatorIsDesignator) Designator
    | (MaybeDesignatorEpsilon) /* epsilon */;

DesignatorList ::=
    (DeisgnatorListMulti) DesignatorList COMMA MaybeDesignator
    | (DesignatorListSingle) MaybeDesignator;

/* Assignop = "=" */

AssignmentOperator ::=
    (AssignmentOperator) ASSIGNMENT;

/* AddOp = "+" | "‐" */

AdditionOperator ::=
    (AdditionOperatorAddition) ADDITION
    | (AdditionOperatorSubtraction) SUBTRACTION;

/* MulOp = "*" | "/" | "%" */

MultiplicationOperator ::=
    (MultiplicationOperatorMultiplication) MULTIPLICATION
    | (MultiplicationOperatorDivision) DIVISION
    | (MultiplicationOperatorModulo) MODULO;

/* RelOp = "==" | "!=" | ">" | ">=" | "<" | "<=" */

RelationalOperator ::=
    (RelationalOperatorEquals) EQUALS
    | (RelationalOperatorNotEquals) NOT_EQUALS
    | (RelationalOperatorGreaterThan) GREATER_THAN
    | (RelationalOperatorGreaterOrEqualThan) GREATER_OR_EQUAL_THAN
    | (RelationalOperatorLessThan) LESS_THAN
    | (RelationalOperatorLessOrEqualThan) LESS_OR_EQUAL_THAN;

/* Type = ident */

Type ::=
    (Type) IDENTIFIER;

/* ReturnType = Type | "void" */

ReturnType ::=
    (ReturnTypeNonVoid) Type
    | (ReturnTypeVoid) VOID;

/* Sign = [ "+" | "-" ] */
Sign ::=
    (SignPositive) ADDITION
    | (SignNegative) SUBTRACTION
    | (SignEpsilon) /* epsilon */;

/* MaybeArray = [ "[" "]" ] */

MaybeArray ::=
    (MaybeArrayIsArray) LEFT_BRACKET RIGHT_BRACKET
    | (MaybeArrayEpsilon) /* epsilon */;

/* MemberElement := "." ident */

MemberElement ::=
    (MemberElement) DOT IDENTIFIER;

/* ArrayElement := "[" Expr "]" */

ArrayElement ::=
    (ArrayElement) LEFT_BRACKET Expr RIGHT_BRACKET;


